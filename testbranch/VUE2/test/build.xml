<!-- A "project" describes a set of targets that may be requested
     when Ant is executed.  The "default" attribute defines the
     target which is executed if no specific target is requested,
     and the "basedir" attribute defines the current working directory
     from which Ant executes the requested task.  This is normally
     set to the current working directory.
-->

<project name="tests" default="usage" basedir=".">

<!-- $Revision: 1.36 $ / $Date: 2009-03-13 04:02:13 $ -->

<!-- 
This ant build file:
        Generates Java source from .GEN files into dist/src
        builds from src into build/classes
        
-->

<!-- ===================== Property Definitions =========================== -->
<!--
  Each of the following properties are used in the build script.
  Values for these properties are set by the first place they are
  defined, from the following list:
  * Definitions on the "ant" command line (ant -Dcatalina.home=xyz compile)
  * Definitions from a "build.properties" file in the top level
    source directory
  * Definitions from a "build.properties" file in the developer's
    home directory
  * Default definitions in this build.xml file

  You will note below that property values can be composed based on the
  contents of previously defined properties.  This is a powerful technique
  that helps you minimize the number of changes required when your development
  environment is modified.  Note that property composition is allowed within
  "build.properties" files as well as in the "build.xml" script.
  <property file="build.properties"/>
  <property file="${user.home}/build.properties"/>
-->

<!-- ==================== File and Directory Names ======================== -->
<!--
  These properties generally define file and directory names (or paths) that
  affect where the build process stores its outputs.
-->
  <property name="osid2.name"      value="okiOSID-2.0a" />
  <property name="build.home"      value="${basedir}/build"/>
  <property name="build.class"     value="${build.home}/classes" />
  <property name="build.lib"       value="${basedir}/lib" />
  <property name="vue.classes"     value="${basedir}/../src/build/classes" />
  <property name="lib.home"        value="${basedir}/../lib"/>

<!--  ==================== Compilation Control Options ==================== -->
<!--
  These properties control option settings on the Javac compiler when it
  is invoked using the <javac> task.

  compile.debug        Should compilation include the debug option?
  compile.deprecation  Should compilation include the deprecation option?
  compile.optimize     Should compilation include the optimize option?
-->
  <property name="compile.debug"       value="true"/>
  <property name="compile.deprecation" value="true"/>
  <property name="compile.optimize"    value="false" /> 

<!-- ==================== Compilation Classpath =========================== -->
<!--
  Rather than relying on the CLASSPATH environment variable, Ant includes
  features that makes it easy to dynamically construct the classpath you
  need for each compilation.
-->
  <path id="compile.classpath">
    <pathelement location="${basedir}" />
    <pathelement location="${basedir}/src" />
    <pathelement location="${basedir}/../src" />
    <pathelement location="${vue.classes}" />
    <pathelement location="${lib.home}" />	
    <pathelement location="${build.class}"/>
    <pathelement location="../src/dist/lib/osid/Fedora20Repository-1.0.jar"/>
    <pathelement location="${lib.home}/commons-discovery.jar" />
    <pathelement location="${lib.home}/jaxrpc-api-unsigned.jar" />
    <pathelement location="${lib.home}/smeteclient.jar" />
    <pathelement location="${lib.home}/VUE-MacOSX.jar"/>
    <pathelement location="${lib.home}/axis-ant.jar" />
    <pathelement location="${lib.home}/commons-logging.jar" />	
    <pathelement location="${lib.home}/${osid2.name}.jar" />	
    <pathelement location="${lib.home}/wsdl4j.jar" />
    <pathelement location="${lib.home}/axis.jar"/>
    <pathelement location="${lib.home}/OSIDIdNoPersist-1.0.jar" />
    <pathelement location="${lib.home}/OSIDLoggingPlain-1.0.jar" />
    <pathelement location="${lib.home}/fedora_2_0-client.jar"/>
    <pathelement location="${lib.home}/saaj-api-unsigned.jar" />
    <pathelement location="${lib.home}/xercesImpl-2.7.1.jar" />
    <pathelement location="${build.lib}/junit.jar"/>
    <pathelement location="${lib.home}/saaj-api-unsigned.jar" />
    <pathelement location="${lib.home}/googleapi.jar" />
    <pathelement path="${lib.home}/google-collect-snapshot-20080820.jar"/>
  	<pathelement path="${lib.home}/iText-2.1.4.jar"/>
  	 
  	<!-- for applet -->
  	<pathelement path="${lib.home}/looks-2.1.4.jar" />   
	
    <pathelement location="${lib.home}/okiSID.jar" />	
	<pathelement location="${lib.home}/log4j-1.2.12.jar" />
	<pathelement location="${lib.home}/MRJAdapter.jar" />
    <pathelement location="${lib.home}/apple-laf.jar" />
    <pathelement location="artifact.xml" />
    <pathelement location="../src/build/classes/edu/tufts/osidimpl/repository/artifact.ArtifactResult.class" />
    
	<!-- for provider -->
	<pathelement path="${lib.home}/HiveSupport-1.0.jar" />
	<pathelement path="${lib.home}/HiveRepositoryPublish-1.0.jar" />
	<pathelement path="${lib.home}/HiveAuthentication-1.0.jar" />
	<pathelement path="${lib.home}/OsidRegistry.jar" />
	<pathelement path="${lib.home}/OsidProvider.jar" />
	<pathelement path="${lib.home}/MIT-OTS.jar" />
	<pathelement path="${lib.home}/javatar.jar" />

	<!-- Hive support -->
	<pathelement path="${lib.home}/commons-httpclient-2.0.jar" />
	<pathelement path="${lib.home}/commons-logging-2.0.jar" />
	<pathelement path="${lib.home}/jdom.jar" />
	<pathelement path="${lib.home}/jhapi.jar" />
	<pathelement path="${lib.home}/jnet.jar" />
	<pathelement path="${lib.home}/jsse.jar" />

   <!-- RDF support -->
   <pathelement path="${lib.home}/arq-2.5.3.jar" />
   <pathelement path="${lib.home}/jena-2.5.3.jar" />
    <pathelement path="${lib.home}/iri.jar" />
     <pathelement path="${lib.home}/concurrent.jar" />
    <pathelement location="${java.class.path}" />
    
    <!-- castor -->
    <pathelement path="${lib.home}/castor-0.9.7-xml.jar" />
    
    <!-- css -->
    <pathelement path="${lib.home}/sac-1.3.jar" />
    <pathelement path="${lib.home}/batik-all.jar" />
    
    <!-- icu -->
    <pathelement path="${lib.home}/icu4j-3_6.jar" />
    
  </path>


<!-- ==================== All Target ====================================== -->
<!--
  The "all" target is a shortcut for running the "clean" target followed 
  by the "compile" target, to force a complete recompile.
-->
	<target name="usage" description="default target: show available targets">
		<echo message="These targets are supported:" />
		<echo message="  clean    deletes generated files" />
		<echo message="  compile  compiles sources" />
		<echo message="  all      perform clean, compile" />
	</target>

<!-- ==================== All Target ====================================== -->
<!--
  The "all" target is a shortcut for running the "clean" target followed by the 
  "compile" target, to force a complete recompile.
-->
  <target name="all" depends="clean, compile"
    description="Clean build and dist, then compile"/>


<!-- ==================== Clean Target ==================================== -->
<!--
  The "clean" target deletes any previous "build" and "dist" directory,
  so that you can be ensured the application can be built from scratch.
-->

  <target name="clean" depends="prepare">
    <delete dir="${build.home}" />
    <delete dir="${dist.home}" />
  </target>


<!-- ==================== Prepare Target ================================== -->
<!--
  The "prepare" target is used to create the "build" destination directory,
  and copy the static contents of your web application to it.  If you need
  to copy static files from external dependencies, you can customize the
  contents of this task.

  Normally, this task is executed indirectly when needed.
-->

  <target name="prepare">

    <!-- Determine if Java 1.4 is available on this machine -->
    <condition property="java1.4.present"> 
      <equals arg1="${ant.java.version}" arg2="1.4" /> 
    </condition>
    
    <!-- Set Ant batch file based on test for platform -->
    <condition property="ant.exec" value="ant.bat"> 
      <os family="windows"/>
    </condition>
    <condition property="ant.exec" value="ant"> 
      <not>
        <os family="windows"/>
      </not>
    </condition>
    
    <tstamp />
  </target>

<!-- ==================== Compile Target(s) ================================== -->
<!--
  The "compile" target transforms source files (from your "src" directory)
  into object files in the appropriate location in the build directory.
-->

  <target name="compile" depends="prepare, compile-VUE"
    description="Compile Java sources">
    <mkdir dir="${build.class}"/>

    <javac srcdir="${basedir}" destdir="${build.class}"
        debug="${compile.debug}"
        deprecation="${compile.deprecation}"
        optimize="${compile.optimize}"
    >
      <classpath refid="compile.classpath"/>
      <include name="src/**/*.java"/>
    </javac>

  </target>
<!-- ============= Jena and Performance Tests ================================ -->

<target name="jenatest" depends="compile" description="Runs Jena and Performance Tests">
    <java classname="edu.tufts.vue.JenaTest" failonerror="true" fork="true">
        <classpath refid="compile.classpath" />
    </java>
    
</target>
<!-- ==================== Artifact Smoke Test ================================ -->
    <target name="artifacttest" depends="compile" description="Dumps Some Artifact Repository Data" >
        <java classname="test.repository.artifact.repositoryDump" failonerror="true" fork="true">
      <classpath refid="compile.classpath"/>
        </java>
    </target>

<!-- ==================== Local Files Smoke Test ================================ -->
    <target name="localfilestest" depends="compile" description="Dumps Some Local Files Repository Data" >
        <java classname="test.repository.localfiles.repositoryDump" failonerror="true" fork="true">
      <classpath refid="compile.classpath"/>
        </java>
    </target>

<!-- ==================== Google Global Smoke Test ================================ -->
    <target name="googleglobaltest" depends="compile" description="Dumps Some Google Global Repository Data" >
        <java classname="test.repository.google.global.repositoryDump" failonerror="true" fork="true">
      <classpath refid="compile.classpath"/>
        </java>
    </target>

<!-- ==================== Google Local Smoke Test ================================ -->
    <target name="googlelocaltest" depends="compile" description="Dumps Some Google Local Repository Data" >
        <java classname="test.repository.google.local.repositoryDump" failonerror="true" fork="true">
      <classpath refid="compile.classpath"/>
        </java>
    </target>

<!-- ==================== Tufts Digital Library Smoke Test ================================ -->
    <target name="tdltest" depends="compile" description="Dumps Some Tufts Digital Library Repository Data" >
        <java classname="test.repository.tdl.repositoryDump" failonerror="true" fork="true">
      <classpath refid="compile.classpath"/>
        </java>
    </target>
<!-- ==================== Provider Smoke Test ================================ -->
    <target name="providertest" depends="compile" description="Dumps Some Provider Data" >
        <java classname="test.provider.provider" failonerror="true" fork="true">
      <classpath refid="compile.classpath"/>
        </java>
    </target>
<!-- =================== Fedora 2.0 Tests===================================-->
<target name="fedora20test" depends="compile" description="Tests for loading fedora 2.0 osid and data from repository">
    <junit printsummary="yes" haltonerror="true" haltonfailure="true" fork="true">
        <formatter type="plain" usefile="false"/>
        <test name="edu.tufts.osidimpl.repository.fedora_2_0.TestRepository"/>
        <classpath refid="compile.classpath"/>
    </junit>
</target>
<!-- =================== Fedora 2.0 Tests===================================-->
<target name="fedoratest" depends="compile" description="Tests for loading fedora 2.0 osid and data from repository">
        <java classname="test.repository.fedora20.repositoryDump" failonerror="true" fork="true">
      <classpath refid="compile.classpath"/>
        </java>
</target>
<!-- =========================Connectivity Matrix and Map Comparison Tests =======-->
<target name="comparetest" depends="compile" description="Tests for Map Comparison">
    <junit printsummary="yes" haltonerror="true" haltonfailure="true" fork="true">
        <formatter type="plain" usefile="false" />
        <test name="edu.tufts.vue.compare.TestConnectivityMatrix" />
        <classpath refid="compile.classpath" />
    </junit>
</target>

<!--- =============  CSS tests =========-->
<target name="csstest" depends="compile" description="Tests for CSS">
    <junit printsummary="yes" haltonerror="true" haltonfailure="true" fork="true">
        <formatter type="plain" usefile="false" />
        <test name="edu.tufts.vue.CSSTest" />
        <classpath refid="compile.classpath" />
    </junit>
</target>


<target name="test" depends="compile" description="Tests for Map Comparison">
    <junit printsummary="yes" haltonerror="true" haltonfailure="true" fork="true">
        <formatter type="plain" />
        <test name="edu.tufts.vue.VUETest" outfile="VUETest" todir="${basedir}"/>
        <classpath refid="compile.classpath" />
    </junit>
</target>

<!--- =============  Repository Implementation Tests =========-->
<target name="OsidTester" depends="compile" description="Tests Repository OSID Implementations via OsidTester tool">
	<echo message="Blackships Ping Test"/>	
	<java classname="junit.textui.TestRunner" failonerror="true" fork="true">
		<arg value="edu.tufts.osidimpl.testing.repository.OsidTester"/>
		<classpath refid="compile.classpath"/>
		<sysproperty key="testProfile" value="blackships-pingProfile.xml"/>
	</java>
	<echo message="Blackships Basic Searching Test"/>
	<java classname="junit.textui.TestRunner" failonerror="true" fork="true">
		<arg value="edu.tufts.osidimpl.testing.repository.OsidTester"/>
		<classpath refid="compile.classpath"/>
		<sysproperty key="testProfile" value="blackships-basicProfile.xml"/>
	</java>
<!--	<echo message="Sakai Basic Test"/>
	<java classname="junit.textui.TestRunner" failonerror="true" fork="true">
		<arg value="edu.tufts.osidimpl.testing.repository.OsidTester"/>
		<classpath refid="compile.classpath"/>
		<sysproperty key="testProfile" value="sakai-basicProfile.xml"/>
	</java>
	<echo message="Submitted Adapter Test"/>
	<java classname="junit.textui.TestRunner" failonerror="true" fork="true">
		<arg value="edu.tufts.osidimpl.testing.repository.OsidTester"/>
		<classpath refid="compile.classpath"/>
		<sysproperty key="testProfile" value="submissionAdapterProfile.xml"/>
	</java>
-->	
	</target>
	
	<!--- =============  Sakai Integration Tests =========-->
	<target name="SakaiIntegration" depends="compile" description="Tests Storing IMS CP in Sakai via OSID">
	<java classname="edu.tufts.osidimpl.testing.sakai.SakaiIntegrationTest" failonerror="true" fork="true">
		<classpath refid="compile.classpath"/>
	</java>
	</target>

	<!--- =============  Ping Sakai Instance at Tufts For Basic OSID Connection =========-->
	<target name="SakaiPing" depends="compile" description="Ping Sakai Instance at Tufts For Basic OSID Connection">
	<echo message="Sakai Ping Test"/>
	<java classname="junit.textui.TestRunner" failonerror="true" fork="true">
		<arg value="edu.tufts.osidimpl.testing.repository.OsidTester"/>
		<classpath refid="compile.classpath"/>
		<sysproperty key="testProfile" value="sakai-pingProfile.xml"/>
	</java>
	</target>

	<!--- =============  Test upload to Sakai =========-->
	<target name="SakaiUpload" depends="compile" description="Test upload to Sakai">
	<echo message="Sakai Upload Test"/>
	<java classname="junit.textui.TestRunner" failonerror="true" fork="true">
		<arg value="edu.tufts.osidimpl.testing.repository.OsidTester"/>
		<classpath refid="compile.classpath"/>
		<sysproperty key="testProfile" value="sakai-uploadProfile.xml"/>
	</java>
	</target>

<!-- ==================== Jar test code ================================ -->
  <target name="jar-testsupport"  
          depends="compile"
          description="Create OSIDTest.jar containing all supporting files">

    <mkdir dir="dist/lib/osid"/>    
    <delete file="dist/lib/osid/OSIDTest-1.0a.jar"/>
    <jar jarfile="dist/lib/osid/OSIDTest-1.0a.jar"
         basedir="${build.class}" 
         includes="edu/tufts/osidimpl/testing/*.*"/>
    <jar jarfile="dist/lib/osid/OSIDTest-1.0a.jar"
         basedir="${build.class}" 
		 update="true"
         includes="edu/tufts/osidimpl/testing/repository/*.*"/>
  </target>
  
<!-- ==================== Compile VUE target ================================ -->
  <target name="compile-VUE"  
          description="Crun the compile target of the VUE src build script">
	<!-- This is a poor solution but seems to work.  There are dependencies on
		products of the VUE build among the test sources. -->
	<echo message="  Compiling VUE source tree"/>
    <ant dir="../src" target="compile" />
  </target>

</project>


